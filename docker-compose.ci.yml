version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "
        # Wait for DB to be ready with timeout
        timeout=30
        counter=0
        echo 'Waiting for database to be ready...'
        until pg_isready -h db -U postgres || [ $counter -eq $timeout ]; do
          counter=$((counter+1))
          sleep 1
          echo 'Waiting... ('$counter'/'$timeout')'
        done

        if [ $counter -eq $timeout ]; then
          echo 'Database connection timeout'
          exit 1
        fi

        echo 'Database is ready'
        
        # Force terminate existing connections
        echo 'Cleaning up existing connections...'
        psql -h db -U postgres -d postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname IN (''postgres'', ''test_postgres'');' || true
        
        # Drop test database if exists
        echo 'Dropping test database if exists...'
        psql -h db -U postgres -d postgres -c 'DROP DATABASE IF EXISTS test_postgres WITH (FORCE);'
        
        # Run tests
        echo 'Running tests...'
        python manage.py test --settings=config.test_settings --noinput
        EXIT_CODE=$?
        
        # Clean up after tests
        echo 'Cleaning up after tests...'
        psql -h db -U postgres -d postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname IN (''postgres'', ''test_postgres'');'
        psql -h db -U postgres -d postgres -c 'DROP DATABASE IF EXISTS test_postgres WITH (FORCE);'
        
        exit $EXIT_CODE
      "
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - DJANGO_SETTINGS_MODULE=config.test_settings
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
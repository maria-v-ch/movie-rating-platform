version: '3.8'

services:
  web:
    build: .
    command: gunicorn --bind 0.0.0.0:8000 config.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${TEST_DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=config.test_settings
      - TEST_DB_PASSWORD=${TEST_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "curl -H 'Host: web' -f http://localhost:8000/health/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  db:
    image: postgres:13
    tmpfs:
      - /var/lib/postgresql/data
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c max_connections=100

  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./nginx.ci.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  app_network:
    driver: bridge

volumes:
  static_volume:
  media_volume:
  logs_volume:
version: '3.8'

services:
  web:
    build: .
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    environment:
      - DEBUG=0
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=localhost,127.0.0.1,web,web:8000,paragoni.space,www.paragoni.space
      - CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000,https://paragoni.space,https://www.paragoni.space
      - DB_NAME=movies_test
      - DB_USER=movies_test
      - DB_PASSWORD=${TEST_DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13
    volumes:
      - postgres_data_test:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=movies_test
      - POSTGRES_USER=movies_test
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U movies_test -d movies_test"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_test:
  static_volume:
  media_volume:
  logs_volume:
version: '3.8'

services:
  web:
    build: .
    command: >
      bash -c '
        # Wait for DB to be ready with timeout
        TIMEOUT=30
        COUNTER=0
        echo "Waiting for database to be ready..."
        until pg_isready -h db -U postgres || [ $COUNTER -eq $TIMEOUT ]; do
          COUNTER=$((COUNTER+1))
          sleep 1
          echo "Waiting... ($COUNTER/$TIMEOUT)"
        done

        if [ $COUNTER -eq $TIMEOUT ]; then
          echo "Database connection timeout"
          exit 1
        fi

        echo "Database is ready"
        
        # Force terminate existing connections before tests
        echo "Cleaning up existing connections..."
        psql -h db -U postgres -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname IN ('postgres', 'test_postgres');" || true
        
        # Drop test database if exists
        echo "Dropping test database if exists..."
        psql -h db -U postgres -d postgres -c "DROP DATABASE IF EXISTS test_postgres WITH (FORCE);"
        
        # Run tests
        echo "Running tests..."
        python manage.py test --settings=config.test_settings --noinput
        EXIT_CODE=$?
        
        # Clean up after tests regardless of test result
        echo "Cleaning up after tests..."
        psql -h db -U postgres -d postgres -c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND datname IN ('postgres', 'test_postgres');"
        psql -h db -U postgres -d postgres -c "DROP DATABASE IF EXISTS test_postgres WITH (FORCE);"
        
        exit $EXIT_CODE
      '
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG=False
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${TEST_DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=config.test_settings

  db:
    image: postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
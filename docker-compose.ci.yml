version: '3.8'

services:
  web:
    build: .
    command: |
      bash -c '
        # Wait for DB to be ready with timeout
        TIMEOUT=30
        COUNTER=0
        echo "Waiting for database to be ready..."
        until pg_isready -h db -U postgres || [ $$COUNTER -eq $$TIMEOUT ]; do
          COUNTER=$$((COUNTER+1))
          sleep 1
          echo "Waiting... ($$COUNTER/$$TIMEOUT)"
        done

        if [ $$COUNTER -eq $$TIMEOUT ]; then
          echo "Database connection timeout"
          exit 1
        fi

        echo "Database is ready"
        
        # Force terminate ALL existing connections before tests
        echo "Cleaning up existing connections..."
        psql -h db -U postgres -d postgres -c "
          SELECT pg_terminate_backend(pid) 
          FROM pg_stat_activity 
          WHERE datname IN ('\''postgres'\'', '\''test_postgres'\'')
          AND pid <> pg_backend_pid();" || true
        
        # Drop test database if exists with retries
        echo "Dropping test database if exists..."
        for i in {1..5}; do
          if psql -h db -U postgres -d postgres -c "DROP DATABASE IF EXISTS test_postgres WITH (FORCE);" 2>/dev/null; then
            echo "Successfully dropped test database"
            break
          fi
          echo "Attempt $$i: Failed to drop test database, retrying after cleanup..."
          psql -h db -U postgres -d postgres -c "
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname = '\''test_postgres'\'';" || true
          sleep 2
        done
        
        # Run tests
        echo "Running tests..."
        python manage.py test --settings=config.test_settings --noinput
        EXIT_CODE=$$?
        
        # Clean up after tests with retries
        echo "Cleaning up after tests..."
        for i in {1..5}; do
          # First terminate all connections
          psql -h db -U postgres -d postgres -c "
            SELECT pg_terminate_backend(pid)
            FROM pg_stat_activity
            WHERE datname IN ('\''postgres'\'', '\''test_postgres'\'')
            AND pid <> pg_backend_pid();" || true
          
          # Then try to drop the database
          if psql -h db -U postgres -d postgres -c "DROP DATABASE IF EXISTS test_postgres WITH (FORCE);" 2>/dev/null; then
            echo "Successfully cleaned up test database"
            break
          fi
          echo "Attempt $$i: Failed to clean up test database, retrying after cleanup..."
          sleep 2
        done
        
        exit $$EXIT_CODE
      '
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG=False
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${TEST_DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SETTINGS_MODULE=config.test_settings
      - SECRET_KEY=${SECRET_KEY}

  db:
    image: postgres:15
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      - POSTGRES_PASSWORD=${TEST_DB_PASSWORD}

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
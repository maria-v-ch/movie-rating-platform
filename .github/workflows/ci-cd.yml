name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DEBUG: False
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,paragoni.space,www.paragoni.space
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: db
      DB_PORT: 5432
      TEST_DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      DJANGO_SETTINGS_MODULE: config.test_settings
      CSRF_TRUSTED_ORIGINS: http://localhost:8000,http://127.0.0.1:8000
      CSRF_COOKIE_SECURE: False
      CSRF_COOKIE_HTTPONLY: False
      CSRF_USE_SESSIONS: False
      CSRF_COOKIE_SAMESITE: Lax
      DJANGO_SUPERUSER_USERNAME: admin
      DJANGO_SUPERUSER_EMAIL: admin@example.com
      DJANGO_SUPERUSER_PASSWORD: admin_password
      GRAFANA_ADMIN_PASSWORD: admin

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        docker compose version

    - name: Setup environment file
      run: |
        cp .env.development.sample .env.development
        
    - name: Run tests
      run: |
        echo "Starting tests with CI configuration..."
        docker compose -f docker-compose.ci.yml config
        docker compose -f docker-compose.ci.yml down -v
        docker compose -f docker-compose.ci.yml up -d db
        echo "Waiting for database to be ready..."
        sleep 10
        docker compose -f docker-compose.ci.yml run --rm web bash -c "python manage.py migrate --noinput && python manage.py test -v 2"